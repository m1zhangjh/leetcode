Min-Heap − Where the value of the root node is less than or equal to either of its children.
Max-Heap − Where the value of the root node is greater than or equal to either of its children.
	Construct:
	Step 1 − Create a new node at leaf
	Step 3 − Compare with its parent.
	Step 4 − If value of parent is less than child, then swap them.
	Step 5 − Repeat step 3 & 4 until Heap property holds.
	Remove Node:
	Step 1 − Remove root node.
	Step 2 − Move the last element of last level to root.
	Step 3 − Compare the value of this child node with its parent.
	Step 4 − If value of parent is less than child, then swap them.
	Step 5 − Repeat step 3 & 4 until Heap property holds.

Max-Heap:
priority_queue <int> pq;
Min-Heap:
priority_queue <int, vector<int>, greater<int> > pq;

struct Data {
    int a;
    int b;
	Data(int a1, int b1) : a(a1), b(b1) {}
    bool operator < (const Data& d) const {
        return a < d.a;		// Max-Heap; Store from 0 to k-1, and check k-1
    }
};
priority_queue <Data> pq;

if (pq.size() < k) {
    pq.push(data);
}
else if (data < pq.top()) {
    pq.pop();
    pq.push(data);
}

while(!pq.empty()) {
    Data d = pq.top();
    pq.pop();
    vector<int> temp{d.x, d.y};
    res.push_back(temp);
}


23. Merge k Sorted Lists
    struct Node {
        ListNode* node;
        Node(ListNode* n) : node(n) {}
        bool operator < (const Node& n) const {
            return node->val > n.node->val;	// min heap, pop the min
        }
    };
	
	Node n(lists[i]); pq.push(n);
	
    ListNode* temp = pq.top().node;
    pq.pop();
    res->next = temp;
    res = temp;
     if (temp->next != NULL) {
        Node n(temp->next);
        pq.push(n);
    }


sort(v.begin(), v.end());
reverse(v.being(), v.end());