/*
struct ListNode {
	int val;
	ListNode* next;
	ListNode() : val(0), next(NULL) {}
	ListNode(int x) : val(x), next(NULL) {}
	ListNode(int x, ListNode* n) : val(x), next(n) {}
};
*/
class LinkList {
private:
	ListNode* head;
	ListNode* tail;
public:
	LinkList() {head = NULL; tail = NULL；}
	void addNode(int v) {
		ListNode* temp = new ListNode(v);
		if (head == NULL) {head = temp; tail = temp;}
		else {tail->next = temp; tail = tail->next;}
	}
}
LinkList l; l.add_node(1);

	ListNode* inverse(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* cur = head;
        ListNode* temp = NULL;
        while (cur != NULL) {
            temp = cur->next;
            cur->next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }

141. Linked List Cycle
	step+2, step+1,
	if(match) step+2->head;
	continue, if match, the pos. step+1, step+1.
82. Remove Duplicates from Sorted List II
	ListNode* preHead = new ListNode();
	keep prev, 
	while () check repeat, check cur, next;
	while finished, if (repeat) prev->next = NULL;
2. Add Two Numbers
	ListNode* preHead = new ListNode();
	Keep prev in recursive function is useful

NC33 merge two sorted linked list
	Check NULL
		return non-NULL
	Check comparison
		small next = recursive
		return small
NC66 两个链表的第一个公共结点
	Suffix is the same
	Size Difference, to find compare position
	
NC40 两个链表生成相加链表
	if (resHead == NULL) {
		resHead = resTempNew;
		res = resTempNew;
	}
	else {
		res->next = resTempNew;
		res = res->next;
	}
NC96 判断一个链表是否为回文结构 (Palindrome)
	Half, inverse, compare
NC133 链表的奇偶重排
	if (oddIndex->next == NULL)
		oddIndex->next = evenHead;
	Must connect through the last node->next, not the last NULL
	
25. Reverse Nodes in k-Group
	//Take care head and tail in each group
    void swapNodes(ListNode* pHead, ListNode* head, int k) {
        ListNode* temp = head;
        for (int i = 0; i < k; i++) {
            if (temp != NULL) {
                temp = temp->next;
            }
            else {
                return;
            }
        }
        temp = head;
        ListNode* nextTemp = head->next;
        for (int i = 0; i < k - 1; i++) {
            ListNode* tempTemp = nextTemp->next;
            nextTemp->next = temp;
            temp = nextTemp;
            nextTemp = tempTemp;
        }
        // Take care of head and tail of K group
        pHead->next = temp;
        head->next = nextTemp;
        swapNodes(head, nextTemp, k);
    }	