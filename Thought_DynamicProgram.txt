	
276. Paint Fence (No 3 consecutive posts have the same color, k colors)
	Dynamic: last two is same; last two is diff;
	total[i-1] = same[i-1] + diff[i-1]
	same[i] = diff[i-1]
	diff[i] = total[i-1] * (k-1)
256. Paint House (No adjacent same color, smallest cost)
		cost0[i] = min(cost1[i-1], cost2[i-1]) + costs[i][0];
		cost1[i] = min(cost0[i-1], cost2[i-1]) + costs[i][1];
        cost2[i] = min(cost0[i-1], cost1[i-1]) + costs[i][2];	

300. Longest Increasing Subsequence
	if i > prev j
		long[i] = max(long[i], long[j]+1);

53. Maximum Subarray
	// If previous sum is smaller than 0, reset/break
	
62. Unique Paths
	Initial: 	path[i][0] = 1; path[0][i] = 1;
	Trans: 		path[i][j] = path[i-1][j] + path[i][j-1];
	
198. House Robber
	Check sz == 1, sz == 2; return
	sum[i] = max(sum[i-1], sum[i-2] + nums[i]);	// rob preivous or not. two situation.
213. House Robber II (arranged in a circle)
	find the max(sum(0...n-2), sum(1...n-1))
337. House Robber III (binary tree)
	if (node == NULL) return 0;
	unordered_map<TreeNode*, int> hash;
	hash[node] = max(resInclude, resExclude);

139. Word Break
	s = "leetcode", wordDict = ["leet","code"]
	DP: match[sz+1]=false; match[0]=true; DP; return match[sz]
		index is where to start find match

322. Coin Change (coins, amount)
	DP[amount+1]
	


44. Wildcard Matching
	'*' Matches any sequence of characters (including the empty sequence).
	Initial i=0 j=0; (only 1 char match, multi *)
	char check[i-1][j-1]; 
	* check[i-1][j] and [i][j-1]

233. Number of Digit One
	0~9 0~99 0~999 repeat. 
		repeat value is long
		Also keep previous value, e^ value
	Fuck: Instead of reduce integer n, increase divider 1, 10, 100, 1000
	

HJ16 购物单
check index is from 0 or 1
value <= budget, to fully use budget

dp[item][budget];

300. Longest Increasing Subsequence (最长增序列长度)
for(int i = 0; i < n; i++) {
	increase[i] = 1;
	for(int j = 0; j < i; j++) {
		if (val[j] < val[i]) {
			increase[i] = max(increase[i], increase[j] + 1);
		}
	}
}
// 从右增长
for(int i = n-1; i >= 0; i--) {
	decrease[i] = 1;
	for(int j = n-1; j > i; j--) {
		if (val[j] < val[i]) {
			decrease[i] = max(decrease[i], decrease[j] + 1);
		}
	}
}
放苹果
dp[n][m]	n个盘子 放m个苹果
dp[i][j] 	i个盘子 放j个苹果
if (n == 1) return 1;
if (m <= 1) return 1;
if (m <= n) return n = m;
vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
dp[1] = vector<int>(m+1, 1);
for (i = 1...n) dp[i][0] = dp[i][1] = 1;
for (i = 2...n)
	for (j = 2...m) {
		if (j < i) {	// Apple is less than plate
			dp[i][j] = dp[i-1][j];
		}
		else {	// Apple is more than plate
			dp[i][j] = dp[i-1][j] + dp[i][j-i];	
					// No use new plate +  
					// use new plate, every plate has at least one apple
		}
	}
cout << dp[n][m];
