We have a string S of lowercase letters, and an integer array shifts.

Call the shift of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). 

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.

Now for each shifts[i] = x, we want to shift the first i+1 letters of S, x times.

Return the final string after all such shifts to S are applied.

Example 1:

Input: S = "abc", shifts = [3,5,9]
Output: "rpl"
Explanation: 
We start with "abc".
After shifting the first 1 letters of S by 3, we have "dbc".
After shifting the first 2 letters of S by 5, we have "igc".
After shifting the first 3 letters of S by 9, we have "rpl", the answer.
Note:

1 <= S.length = shifts.length <= 20000
0 <= shifts[i] <= 10 ^ 9


class Solution {
public:
    string shiftingLetters(string S, vector<int>& shifts) {
        int size = S.size();
		int index = size - 1;
		int shift = 0;
		for (int i = 0; i < size; i++) {
			shift += shifts[index];
			shift %= 26;
			S[index] = (S[index] - 'a' + shift) % 26 + 'a';
			index--;
		}
		return S;
    }
};


Simplified the index

class Solution {
public:
    string shiftingLetters(string S, vector<int>& shifts) {
		int shift = 0;
		for (int index = S.size() - 1; index >= 0; index--) {
			shift += shifts[index];
			shift %= 26;
			S[index] = (S[index] - 'a' + shift) % 26 + 'a';
		}
		return S;
    }
};