
unordered_map <char, int> hash;
	for (unordered_map<char, int>::iterator i = hash.begin(); i != hash.end(); i++) {}
	if (hash.find(num) == hash.end()) / if not found
	
	for (unordered_map<char, int>::iterator it = hash.begin(); it != hash.end(); it++) {
		char c = it->first;
	
	
vector<int>
	begin		end
	front		back
				pop_back	(return void)
				push_back
				
list<int>
	begin		end
	front		back
	pop_front	pop_back	(return void)
	push_front	push_back

queue<int>
	front		back
				pop			(return void)
	push
	
stack<int>
	top
	pop						(return void)
	push
		
		
switch (c) {
	case '(':	break;
	case '[':	break;
	default: ;
}

vector.resize(size, val);
sort(vec.begin(), vec.end(), cmp);
sort(vec.begin(), vec.begin()+4, cmp);
bool cmp (int i, int j) {return i < j;}