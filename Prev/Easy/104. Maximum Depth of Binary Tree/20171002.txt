/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int max(int a, int b) {
        if (a > b)
            return a;
        else
            return b;
    } 
    
    int maxDepth(TreeNode* root) {
        if (root == NULL)
            return 0;
        return max(maxDepth(root->left)+1, maxDepth(root->right)+1);
    }
};

// Deepth First Search
class Solution {
public:    
    int maxDepth(TreeNode* root) {
        if (root == NULL)
            return 0;
        return max(maxDepth(root->left)+1, maxDepth(root->right)+1);
    }
};


// Breadth First Search
#include <queue>
class Solution {
public:    
    int maxDepth(TreeNode* root) {
        queue<TreeNode*> q;
        if (root != NULL)
            q.push(root);
        int res = 0;
        while (!q.empty()) {
            res++;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front();
                q.pop();
                
                if (node->left != NULL)
                    q.push(node->left);
                if (node->right != NULL)
                    q.push(node->right);
            }
        }
        return res;
    }
};