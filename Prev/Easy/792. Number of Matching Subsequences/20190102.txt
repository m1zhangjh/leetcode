Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.

Example :
Input: 
S = "abcde"
words = ["a", "bb", "acd", "ace"]
Output: 3
Explanation: There are three words in words that are a subsequence of S: "a", "acd", "ace".
Note:

All words in words and S will only consists of lowercase letters.
The length of S will be in the range of [1, 50000].
The length of words will be in the range of [1, 5000].
The length of words[i] will be in the range of [1, 50].


// Hash Table
class Solution {
public:
    int numMatchingSubseq(string S, vector<string>& words) {

    }
};



// Time Limit Exceeded
class Solution {
public:
    int numMatchingSubseq(string S, vector<string>& words) {
		vector<int> index;
		index.resize(words.size(), 0);
		int res = 0;
		for (int i = 0; i < S.size(); i++) {
			for (int j = 0; j < words.size(); j++) {
				// index[j] == -1, means the words[j] is already a subsequence
				if (index[j] != -1) {
					// Check words[j]'s current index
					string word = words[j];
					if (word[index[j]] == S[i]) {
						// Update words[j] index
						index[j]++;
						// Check words[j] is subsequence or not
						if (index[j] == words[j].length()) {
							index[j] = -1;
							res++;
						}
					}
				}
			}
		}
		return res;
    }
};