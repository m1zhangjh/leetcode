#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
 
vector<int> split(string str);
int main()
{
    string a;
    while (getline(cin,a))
    {
        int pos = a.find_first_of( "-");
        vector<int> left_one = split(a.substr(0,pos));
        vector<int> right_one = split(a.substr(pos + 1));
        if (left_one[0] == 13 && left_one[1] == 2)          //左边对王
            cout << a.substr(0, pos) << endl;               //输出左边
        else if (right_one[0] == 13 && right_one[1] == 2)   //右边对王
            cout << a.substr(pos + 1) << endl;              //输出右边
        else if (left_one[1] == 4 && right_one[1] != 4)     //左边炸弹，右边不是
            cout << a.substr(0, pos) << endl;               //输出左边
        else if (right_one[1] == 4 && left_one[1] != 4)     //右边炸弹，左边不是
            cout << a.substr(pos + 1) << endl;              //输出右边
        else if (left_one[1] == right_one[1])               //其他情况
            if (left_one[0] > right_one[0])
                cout << a.substr(0, pos) << endl;
            else
                cout << a.substr(pos + 1) << endl;
        else
            cout << "ERROR" << endl;
    }
    return 0;
}
vector<int> split(string str)
{
    vector<string> table = { "3", "4", "5", "6", "7", "8", "9", "10",
                            "J", "Q", "K", "A", "2", "joker", "JOKER" };
    vector<int>  poker(2,0);      //第一位存牌的大小，第二位存牌个数
    int pos = str.find_first_of(" ");
    if (pos != -1)
    {
        string temp = str.substr(0,pos);
        if (temp == "10"&&str.substr(pos + 1, 2) != "10")   //因为只有除了大小王以外只有10是两位，
            poker[1] = 5;                                   //当第一张是10，第二张不是的时候，一定是顺子
        else
            poker[1] = (str.size()+1)/(temp.size()+1);  //其他情况可以统一计算牌的个数。即使是第一张牌不为10，中间有10的顺子，只多了一张牌，除数为2，因此，不会出错
        poker[0] = find(table.begin(), table.end(), temp)-table.begin();
    }
    else
    {
        poker[1] = 1;
        poker[0] = find(table.begin(), table.end(), str) - table.begin();
    }
    return poker;
}